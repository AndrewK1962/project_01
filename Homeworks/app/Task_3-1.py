# Задача 3.1.

# Создайте класс матрицы (или таблицы).
# Требования к классу:
#   - каждая колонка является числом от 1 до n (n любое число, которые вы поставите!)
#   - в каждой ячейке содержится либо число, либо None
#   - доступны следующие методы матрицы:
#       * принимать новые значения, 
#       * заменять существующие значения, 
#       * выводить число строк и колонок.

# Пример матрицы 10 на 10 из единиц:
# [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

# Примечание! 
#   - новый класс не запрещено строить на базе существующих типов данных: списков, словарей и тд.
#   - отображать в таблице/матрице название колонки не обязательно!
#   - использовать готовые классы numpy.array() и pandas.DataFrame() запрещено!
#   - проявите фантазию :)
#===================================================================================================
class Matrix:
    # конструктор класса - создание матрицы с определенным числом строк и столбцов
    def __init__(self, rows, columns):
        # создание пустой матрицы с None в каждой ячейке
        # количество строк и столбцов передается в конструкторе
        self.matrix = [[None for _ in range(columns)] for _ in range(rows)]
        # сохранение числа строк и столбцов
        self.num_rows = rows
        self.num_columns = columns

    # метод для добавления нового значения в матрицу 
    # принимает номер строки, столбца и значение
    def add_value(self, row_num, column_num, value):
        # проверка, что номер строки и столбца не выходят за границы матрицы
        if row_num >= self.num_rows or column_num >= self.num_columns:
            print("Неверный номер строки или столбца!")
            return False
        # добавление значения в матрицу
        self.matrix[row_num][column_num] = value
        print("В ячейку строка", row_num,", столбец", column_num, ", записано", value)
        return True

    # метод для замены значения в матрице, 
    # принимает номер строки, столбца и новое значение
    def replace_value(self, row_num, column_num, new_value):
        # проверка, что номер строки и столбца не выходят за границы матрицы
        if row_num >= self.num_rows or column_num >= self.num_columns:
            print("Неверный номер строки или столбца!")
            return False
        # проверка, что в ячейке уже есть значение, которое нужно заменить
        if self.matrix[row_num][column_num] is None:
            print("Значение в этой ячейке пустое, нечего заменять!")
            return False
        # замена значения в матрице
        self.matrix[row_num][column_num] = new_value
        print("В ячейку строка", row_num,", столбец", column_num, ", записано новое значение", new_value)
        return True

    # метод для получения количества строк матрицы
    def get_num_rows(self):
        return self.num_rows

    # метод для получения количества столбцов матрицы
    def get_num_columns(self):
        return self.num_columns
    
    # метод для вывода всей матрицы
    def print_matrix(self):
        print("Matrix:")
        for row in self.matrix:
            for value in row:
                # вывод значений в ячейках матрицы
                # если значение None, то выводим символ 'N'
                if value is None:
                    print("N", end=" ") # чтобы матрица лучше читалась добавляем пробел
                else:
                    print(value, end=" ")
            print()  # переход к новой строке

# Например:

# Создание матрицы 4x4
mat = Matrix(4, 4)
# Вывод созданной матрицы
mat.print_matrix()

# Добавление значений в матрицу
# Не все ячейки заполняются,
# последняя строка и последний столбец остаются пустыми
# т.е. заполнены None
mat.add_value(0, 0, 1)
mat.add_value(0, 1, 1)
mat.add_value(0, 2, 1)
mat.add_value(1, 0, 1)
mat.add_value(1, 1, 1)
mat.add_value(1, 2, 1)
mat.add_value(2, 0, 1)
mat.add_value(2, 1, 1)
mat.add_value(2, 2, 1)

# Вывод количества строк и столбцов матрицы
print("Количество строк в матрице:", mat.get_num_rows())
print("Количество столбцов в матрице:", mat.get_num_columns())

# Вывод всех значений матрицы
mat.print_matrix()

# Замена значения в ячейке (1, 1) на новое значение 0
mat.replace_value(1, 1, 0)

# Вывод всех значений матрицы после замены
mat.print_matrix()

# Попытка замены значения в ячейке (3, 3) там было None
mat.replace_value(3, 3, 0)

# добавление значения в ячейку за границами матрицы (4, 4)
mat.add_value(4, 4, 1)

# Результат:
# Matrix:
# N N N N
# N N N N
# N N N N
# N N N N
# В ячейку строка 0 , столбец 0 , записано 1
# В ячейку строка 0 , столбец 1 , записано 1
# В ячейку строка 0 , столбец 2 , записано 1
# В ячейку строка 1 , столбец 0 , записано 1
# В ячейку строка 1 , столбец 1 , записано 1
# В ячейку строка 1 , столбец 2 , записано 1
# В ячейку строка 2 , столбец 0 , записано 1
# В ячейку строка 2 , столбец 1 , записано 1
# В ячейку строка 2 , столбец 2 , записано 1
# Количество строк в матрице: 4
# Количество столбцов в матрице: 4
# Matrix:
# 1 1 1 N
# 1 1 1 N
# 1 1 1 N
# N N N N
# В ячейку строка 1 , столбец 1 , записано новое значение 0
# Matrix:
# 1 1 1 N
# 1 0 1 N
# 1 1 1 N
# N N N N
# Значение в этой ячейке пустое, нечего заменять!
# Неверный номер строки или столбца!